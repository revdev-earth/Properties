// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Property {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  propertyInformation PropertyInformation?
  propertyLegal       PropertyLegal?
  propertyTenant      PropertyTenant?

  propertyInsurance       PropertyInsurance[]
  basicService            PropertyBasicService[]
  PaymentTenant           PaymentTenant?
  maintenanceInfoProperty MaintenanceInfoProperty?

  settings PropertySettings?
}

model PropertyInformation {
  id Int @id @default(autoincrement())

  propertyId String   @unique // Ahora este campo es único, asegurando la relación uno a uno
  property   Property @relation(fields: [propertyId], references: [id])

  streetAndNumber String
  neighborhood    String
  cityAndState    String
  postalCode      String
  gpsCoordinates  String?

  // Features
  propertyType  String // E.g., house, apartment, commercial space, etc.
  totalLandArea Float? // In m², optional if not applicable
  builtArea     Float // In m²
  floors        Int // Number of floors
  orientation   String // E.g., north, south, east, west
  age           Int // Years since construction or last major renovation

  // Interior
  bedrooms        Int
  bathrooms       Int // Number of full bathrooms
  halfBathrooms   Int? // Number of half bathrooms
  kitchen         String // Brief description of the kitchen
  livingAndDining String? // Description if integrated or separated
  additionalRooms String? // E.g., office, laundry room, storage

  // Exterior
  yardOrGarden         String? // Description of outdoor space, if available
  parking              Int // Number of parking spots
  parkingLocation      String? // E.g., covered, private, shared
  balconiesAndTerraces String? // Description of balconies or terraces
  recreationalAreas    String? // Description of recreational areas, if available
}

model PropertyLegal {
  id Int @id @default(autoincrement())

  propertyId String   @unique // Ahora este campo es único, asegurando la relación uno a uno
  property   Property @relation(fields: [propertyId], references: [id])

  // Property Title
  deedNumber     String // Identification number for the deed
  notary         String // Name of the notary, registration number, and location
  deedDate       DateTime // Date when the deed was registered
  publicRegistry String // Folio number or registry code in the Public Property Registry

  // Registered Owner
  ownerName    String
  ownerID      String // Official ID of the owner (e.g., passport number, etc.)
  ownerAddress String? // Contact address if different from the property
  ownerContact String? // Contact number for legal or emergency issues

  // Property Usage
  zoning             String // Zoning classification (residential, commercial, etc.)
  usageRestrictions  String? // Details of any restrictions on usage
  permitsAndLicenses String? // Necessary permits for current usage
  zoningHistory      String? // History of zoning changes, if any

  // Active Contracts
  leaseContract          String? // Summary or copy of the current lease agreement
  contractDuration       String? // Contract duration, start and end date, renewal terms
  tenantResponsibilities String? // Legal responsibilities of the tenant
  ownerResponsibilities  String? // Legal obligations of the owner

  // Legal History of the Property
  ownershipChanges String? // History of ownership transfers with dates
  mortgagesOrLiens String? // Information about mortgages, liens, or encumbrances
  legalDisputes    String? // Information on past or pending legal disputes
  auctionHistory   String? // History of auctions or bank repossessions

  // Taxes and Fiscal Obligations
  propertyTax          String // Cadastral account number and status of property tax
  specialTaxesOrFees   String? // Additional taxes or service fees applicable
  debtFreeCertificates String? // Documentation certifying no fiscal debts

  // Property Policies and Warranties
  constructionWarranty  String? // Construction warranty details if newly built
  equipmentWarranties   String? // Warranties for appliances, HVAC, electrical or plumbing systems
  structuralSafetyCerts String? // Structural safety certificates, e.g., seismic certifications

  // Regulations and Norms
  internalRegulations  String? // Regulations if part of a condominium or gated community
  localNorms           String? // Summary of specific local norms affecting the property
  environmentalPermits String? // Permits required if located in a protected environmental area
}

model PropertyTenant {
  id                     Int      @id @default(autoincrement())
  propertyId             String   @unique // Ahora este campo es único, asegurando la relación uno a uno
  property               Property @relation(fields: [propertyId], references: [id])
  // Basic Tenant Information
  fullName               String
  identificationDocument String // Type and number (e.g., ID, passport)
  birthDate              DateTime
  phone                  String
  email                  String
  additionalAddress      String? // Additional postal address if applicable
  // additionalResidents    PropertyAdditionalResident[] // List of additional people residing with the tenant

  // Lease Contract Details
  leaseStartDate   DateTime
  leaseEndDate     DateTime
  contractDuration String // Short-term, long-term, or indefinite
  renewalTerms     String? // Terms for renewal or notice for termination
  securityDeposit  Float // Amount and details on refund conditions
  specificClauses  String? // Any specific agreed clauses (e.g., pet policies)

  // Financial Information and Payments
  rentAmount             Float // Monthly or periodic rent amount
  preferredPaymentMethod String // Payment method (e.g., bank transfer)
  // paymentHistory         PaymentTenant[] // Payment records with status
  discountsOrAdjustments String? // Any discounts or adjustments in specific cases

  // Tenant Responsibilities
  tenantUtilities  String? // List of utilities tenant is responsible for
  basicMaintenance String? // Basic maintenance obligations
  reportedIssues   String? // Details on any reported issues or damages
  pets             String? // Information about pets if allowed

  // Stay History
  moveInDate            DateTime
  absencePeriods        String? // Temporary absences with dates if applicable
  contractModifications String? // Record of any contract changes

  // Tenant Evaluation and Comments
  satisfactionSurveys  String? // Survey results or feedback notes
  communicationHistory String? // Notes on important communications
  incidents            String? // Notable incidents involving tenant

  // Emergency Contacts and Trusted Persons
  emergencyContactName     String
  emergencyContactPhone    String
  emergencyContactRelation String
  trustedPerson            String? // Authorized individual for property access
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  PropertyInsurance PropertyInsurance[]
}

model PropertyAdditionalResident {
  id                     Int       @id @default(autoincrement())
  // tenantId               Int // Foreign key to Tenant model
  // tenant                 PropertyTenant @relation(fields: [tenantId], references: [id])
  // Basic Information for Each Additional Person
  fullName               String
  relationshipToTenant   String // Relationship to primary tenant
  identificationDocument String? // Optional ID for verification
  birthDate              DateTime
  phone                  String? // Contact phone number if applicable
  email                  String? // Contact email if needed
  // Duration of Stay
  stayStartDate          DateTime
  stayEndDate            DateTime? // End date if applicable (for temporary residents)
  stayConditions         String? // Any specific conditions for stay
  // Responsibilities and Property Access
  sharedResponsibilities String? // Shared responsibilities if applicable
  propertyAccess         Boolean // Whether this person has independent access
  specialPermissions     String? // Permissions or restrictions
  // Pets and Associated Items
  pets                   String? // Information on pets if they reside with this person
  personalFurniture      String? // Details on personal furniture or equipment
  // Incidents and Relevant Notes
  notableIncidents       String? // Record of any incidents involving this person
  additionalComments     String? // Additional notes for records
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model PaymentTenant {
  id                     String   @id @default(uuid())
  // tenantId               Int // Foreign key to Tenant model
  // tenant                 PropertyTenant @relation(fields: [tenantId], references: [id])
  // Payment Details
  paymentDate            DateTime
  paymentStatus          String // Status (on-time, delayed, pending)
  paymentNotes           String? // Notes for partial or incomplete payments
  lateFees               Float? // Late fees if any
  discountsOrAdjustments String? // Adjustments if any
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  propertyId             String   @unique // Ahora este campo es único, asegurando la relación uno a uno
  property               Property @relation(fields: [propertyId], references: [id])
}

model PropertyInsurance {
  id Int @id @default(autoincrement())

  // Clave externa sin restricción @unique para permitir varios registros relacionados con un solo Property
  propertyId String // Campo de relación para la clave externa
  property   Property @relation(fields: [propertyId], references: [id])

  // Relación con Tenant
  tenantId Int? // Clave externa opcional para seguro de inquilino
  tenant   PropertyTenant? @relation(fields: [tenantId], references: [id])

  // Información básica del seguro
  insuranceType    String // Tipo de seguro (ej. hogar, incendio, desastre)
  insuranceCompany String // Nombre del proveedor del seguro
  policyNumber     String // ID o código de póliza
  startDate        DateTime // Fecha de inicio del seguro
  expirationDate   DateTime // Fecha de vencimiento del seguro
  insuredAmount    Float // Valor asegurado o indemnización máxima
  premiumCost      Float // Costo de la prima (ej. anual o periódico)

  // Cobertura y exclusiones
  mainCoverage          String // Principales coberturas (ej. incendio, robo)
  thirdPartyCoverage    String? // Cobertura de responsabilidad civil a terceros
  equipmentCoverage     String? // Cobertura para electrodomésticos, HVAC, etc.
  coverageExclusions    String? // Lista de exclusiones de cobertura
  applicableDeductibles String? // Deducibles según tipo de riesgo

  // Información de contacto de emergencia
  emergencyContact      String? // Contacto de emergencia o de siniestros
  insuranceAgentName    String? // Nombre del agente de seguros
  insuranceAgentContact String? // Información de contacto del agente (teléfono, correo)
  claimProcedures       String? // Resumen de procedimientos de siniestro

  // Renovación y condiciones especiales
  renewalConditions String? // Términos de renovación (automática o manual)
  coverageReviews   String? // Información sobre revisiones o inspecciones periódicas de cobertura
  specialClauses    String? // Cláusulas especiales que impactan la cobertura

  // Historial de siniestros
  claims PropertyBasicService[] // Relación con el modelo Claim para registros de siniestros

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // PropertyClaim        PropertyClaim[]
  // PropertyBasicService PropertyBasicService[]
}

model PropertyClaim {
  id                Int      @id @default(autoincrement())
  // insuranceId       Int // Foreign key to Insurance model
  // insurance         PropertyInsurance @relation(fields: [insuranceId], references: [id])
  // Claim Details
  claimDate         DateTime // Date of the claim
  claimReason       String // Reason for the claim (e.g., water damage)
  claimStatus       String // Claim status (approved, in process, rejected)
  indemnifiedAmount Float? // Amount indemnified if the claim is approved
  claimNotes        String? // Additional notes or recommendations

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyBasicService {
  id         String   @id @default(uuid())
  propertyId String // Foreign key to Property model
  property   Property @relation(fields: [propertyId], references: [id])

  // Service Information
  serviceType        String // E.g., water, electricity, gas, internet, etc.
  provider           String // Name of the service provider
  accountNumber      String // Unique service identifier (e.g., meter number)
  paymentResponsible String // Tenant or Property owner

  // Emergency and Support Contacts
  emergencyNumber     String // Emergency contact number
  supportContactName  String // Name of the technical support contact
  supportContactPhone String
  supportContactEmail String?
  supportHours        String // Customer support hours

  // Conditions and Specific Clauses
  disconnectionClause    String? // Details about disconnection/reconnection terms
  contractConditions     String? // Contract terms, penalties for early cancellation
  sharedResponsibilities String? // Shared responsibilities between tenant and owner

  // Incident History
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  // PropertyInsurance    PropertyInsurance? @relation(fields: [propertyInsuranceId], references: [id])
  // propertyInsuranceId  Int?
  incident            IncidentService[]
  servicePayment      ServicePayment[]
  PropertyInsurance   PropertyInsurance? @relation(fields: [propertyInsuranceId], references: [id])
  propertyInsuranceId Int?
}

model ServicePayment {
  id             String               @id @default(uuid())
  basicServiceId String // Foreign key to BasicService model
  basicService   PropertyBasicService @relation(fields: [basicServiceId], references: [id])
  // Billing and Payment Details
  dueDate        DateTime // Payment due date
  paymentStatus  String // Status (e.g., paid, pending, in process)
  averageAmount  Float? // Average monthly or bi-monthly amount

  // payments
  paymentDate  DateTime
  amount       Float
  paymentNotes String?

  // Consumption and Measurement
  measurementMethod  String? // E.g., water meter, electricity in kWh, gas tank
  readingDate        DateTime
  readingValue       Float
  readingNotes       String?
  averageConsumption Float? // Average consumption for a given period
}

model IncidentService {
  id             Int                  @id @default(autoincrement())
  basicServiceId String // Foreign key to BasicService model
  basicService   PropertyBasicService @relation(fields: [basicServiceId], references: [id])

  incidentDate        DateTime
  incidentDescription String // Description of the service interruption
  actionsTaken        String // Actions taken during the incident
  compensation        Float? // Any compensation or discount offered
  compensationNotes   String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model MaintenanceInfoProperty {
  id         Int      @id @default(autoincrement())
  propertyId String   @unique // Foreign key to Property model
  property   Property @relation(fields: [propertyId], references: [id])

  annualBudget     Float
  accumulatedCosts Float // Total accumulated maintenance costs
  costDistribution String? // Breakdown of costs between owner and tenant

  maintenance          Maintenance[]
  equipmentMaintenance MaintenanceEquipment[]
}

model Maintenance {
  id                        Int                     @id @default(autoincrement())
  maintenanceInfoPropertyId Int // Clave foránea al modelo Property
  maintenanceInfoProperty   MaintenanceInfoProperty @relation(fields: [maintenanceInfoPropertyId], references: [id])

  providerId         Int?                 @unique
  provider           MaintenanceProvider? @relation(fields: [providerId], references: [id])
  maintenanceNotesId Int?                 @unique
  maintenanceNotes   MaintenanceNotes?    @relation(fields: [maintenanceNotesId], references: [id])

  // Información de mantenimiento
  type                String // Tipo de mantenimiento: "preventive", "corrective", "request"
  task                String // Descripción de la tarea (por ejemplo, "Limpieza de AC", "Reemplazo de ventana")
  frequency           String? // Solo para mantenimiento preventivo: "mensual", "trimestral", "anual"
  maintenanceDate     DateTime // Fecha del mantenimiento realizado o programado
  nextMaintenanceDate DateTime? // Fecha del próximo mantenimiento programado (solo para preventivo)

  // Mantenimiento correctivo / Solicitudes
  damageDescription String? // Descripción del daño (solo para mantenimiento correctivo o solicitudes)
  status            String? // Estado de la solicitud (pendiente, en proceso, completado)
  repairCost        Float? // Costo de la reparación (solo para mantenimiento correctivo)
  costResponsible   String // Inquilino o propietario, quien es responsable del costo
  // Información adicional
  warranty          String? // Detalles de la garantía si aplica (solo para reparaciones)
  observations      String? // Notas adicionales sobre el mantenimiento
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model MaintenanceEquipment {
  id                        Int                     @id @default(autoincrement())
  maintenanceInfoPropertyId Int // Clave foránea al modelo Property
  maintenanceInfoProperty   MaintenanceInfoProperty @relation(fields: [maintenanceInfoPropertyId], references: [id])

  providerId         Int?                 @unique
  provider           MaintenanceProvider? @relation(fields: [providerId], references: [id])
  maintenanceNotesId Int?                 @unique
  maintenanceNotes   MaintenanceNotes?    @relation(fields: [maintenanceNotesId], references: [id])

  // Detalles de mantenimiento de equipos
  equipmentName        String // Nombre del equipo (por ejemplo, refrigerador, aire acondicionado)
  maintenanceFrequency String // Frecuencia de mantenimiento: "mensual", "anual"
  lastMaintenanceDate  DateTime // Fecha del último mantenimiento realizado
  nextMaintenanceDate  DateTime? // Fecha del próximo mantenimiento programado
  warrantyPolicy       String? // Política de garantía para el equipo (si aplica)
  maintenanceCost      Float? // Costo estimado para el mantenimiento del equipo
  costResponsible      String // Quien es responsable del costo: inquilino o propietario
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model MaintenanceProvider {
  id                   Int                    @id @default(autoincrement())
  maintenance          Maintenance[]
  equipmentMaintenance MaintenanceEquipment[]

  // Información del proveedor
  name             String // Nombre del proveedor
  servicesProvided String // Servicios proporcionados (por ejemplo, plomería, electricidad, pintura)
  contactPhone     String // Teléfono de contacto
  contactEmail     String? // Correo electrónico de contacto
  availability     String? // Disponibilidad del proveedor (por ejemplo, solo días laborales, cita requerida)
  contractDetails  String? // Detalles del contrato de mantenimiento, si aplica

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MaintenanceNotes {
  id                   Int                    @id @default(autoincrement())
  maintenance          Maintenance[]
  equipmentMaintenance MaintenanceEquipment[]

  // Additional Notes and Recommendations
  usageRecommendations    String? // Tips for proper use and care of the property
  specialTasks            String? // Non-periodic tasks (e.g., seasonal preparations)
  sustainabilityPractices String? // Suggestions for sustainable practices
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model PropertySettings {
  id         Int      @id @default(autoincrement())
  propertyId String   @unique // Ahora este campo es único, asegurando la relación uno a uno
  property   Property @relation(fields: [propertyId], references: [id])

  // Combined configuration settings
  notificationSettings ConfigNotificationSettings?
  accessPermissions    ConfigAccessPermission[]
  maintenance          ConfigMaintenance?
  reports              ConfigReportSettings?
  payments             ConfigPaymentSettings?
  security             ConfigSecurityPreferences?
  leaseTerms           ConfigLeaseTerms?
  customAlerts         ConfigCustomAlert[]
}

model ConfigNotificationSettings {
  id                 Int              @id @default(autoincrement())
  propertySettingsId Int              @unique
  propertySettings   PropertySettings @relation(fields: [propertySettingsId], references: [id])

  rentalPaymentReminder Boolean // Reminder for rental payment
  preventiveMaintenance Boolean // Notification for preventive maintenance
  serviceAlerts         Boolean // Alerts for service issues or interruptions
  insuranceExpiration   Boolean // Alerts for insurance or contract renewals
  notificationMethod    String // E.g., email, SMS, push notifications
  notificationFrequency String // Daily, weekly, monthly, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfigAccessPermission {
  id                 Int              @id @default(autoincrement())
  propertySettingsId Int // Foreign key to PropertySettings
  propertySettings   PropertySettings @relation(fields: [propertySettingsId], references: [id])

  // Access Control
  userRole          String // Owner, Tenant, Property Manager
  readPermission    Boolean // Permission to read
  writePermission   Boolean // Permission to write
  accessibleSection String // Accessible section (e.g., "Insurance", "Legal")
  invitationStatus  String? // Invitation status for temporary users

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfigMaintenance {
  id                 Int              @id @default(autoincrement())
  propertySettingsId Int              @unique
  propertySettings   PropertySettings @relation(fields: [propertySettingsId], references: [id])

  preventiveMaintenance String? // Frequency of preventive maintenance tasks
  reminders             String? // Schedule for maintenance reminders
  preferredProviderId   Int? // Link to preferred maintenance provider
  preferredProvider     ConfigProvider? @relation(fields: [preferredProviderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfigReportSettings {
  id                 Int              @id @default(autoincrement())
  propertySettingsId Int              @unique
  propertySettings   PropertySettings @relation(fields: [propertySettingsId], references: [id])

  reportFrequency String // Monthly, quarterly, annually, etc.
  reportType      String // List of types (financial, occupancy, maintenance)
  reportFormat    String // PDF, Excel, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfigPaymentSettings {
  id                 Int              @id @default(autoincrement())
  propertySettingsId Int              @unique
  propertySettings   PropertySettings @relation(fields: [propertySettingsId], references: [id])

  paymentReminders Boolean // Enable or disable payment reminders

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TenantBilledService   ConfigTenantBilledService[]
  AcceptedPaymentMethod ConfigAcceptedPaymentMethod[]
}

model ConfigTenantBilledService {
  id                Int                   @id @default(autoincrement())
  paymentSettingsId Int // Foreign key to PaymentSettings
  paymentSettings   ConfigPaymentSettings @relation(fields: [paymentSettingsId], references: [id])
  serviceName       String // Service billed to tenant

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfigAcceptedPaymentMethod {
  id                Int                   @id @default(autoincrement())
  paymentSettingsId Int // Foreign key to PaymentSettings
  paymentSettings   ConfigPaymentSettings @relation(fields: [paymentSettingsId], references: [id])
  method            String // Accepted payment method (e.g., bank transfer, credit card)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfigSecurityPreferences {
  id                 Int              @id @default(autoincrement())
  propertySettingsId Int              @unique
  propertySettings   PropertySettings @relation(fields: [propertySettingsId], references: [id])

  lockChangeFrequency String? // Recommended interval for lock changes
  passwordPolicy      String // Password length and periodic change requirements
  alarmSystemSettings String? // Alarm and monitoring system preferences

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfigLeaseTerms {
  id                 Int              @id @default(autoincrement())
  propertySettingsId Int              @unique
  propertySettings   PropertySettings @relation(fields: [propertySettingsId], references: [id])

  leaseDuration  String // Duration and renewal settings
  rentIncrease   Float? // Annual or periodic rent increase
  specialClauses String? // Custom clauses for subletting, restrictions, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfigCustomAlert {
  id                 Int              @id @default(autoincrement())
  propertySettingsId Int // Foreign key to PropertySettings
  propertySettings   PropertySettings @relation(fields: [propertySettingsId], references: [id])

  // Custom Alert Settings
  alertDescription String // Description of the custom alert
  priority         String // High, medium, low
  alertHistory     ConfigAlertHistory[] // Link to alert history

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfigAlertHistory {
  id            Int               @id @default(autoincrement())
  customAlertId Int // Foreign key to CustomAlert
  customAlert   ConfigCustomAlert @relation(fields: [customAlertId], references: [id])

  alertDate      DateTime
  resolutionDate DateTime?
  alertStatus    String // Status of the alert

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfigProvider {
  id      Int    @id @default(autoincrement())
  name    String // Provider name
  contact String // Contact information

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ConfigMaintenance ConfigMaintenance[]
}
