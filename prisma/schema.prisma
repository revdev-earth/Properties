// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Property {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  informationProperty InformationProperty?
  legalInfo           LegalInfo?
  Tenant              Tenant[]
}

model InformationProperty {
  id Int @id @default(autoincrement())

  propertyId Int      @unique // Ahora este campo es único, asegurando la relación uno a uno
  property   Property @relation(fields: [propertyId], references: [id])

  streetAndNumber String // direccion
  neighborhood    String // barrio
  cityAndState    String
  postalCode      String
  gpsCoordinates  String? // Optional

  // Features
  propertyType  String // E.g., house, apartment, commercial space, etc.
  totalLandArea Float? // In m², optional if not applicable
  builtArea     Float // In m²
  floors        Int // Number of floors
  orientation   String // E.g., north, south, east, west
  age           Int // Years since construction or last major renovation

  // Interior
  bedrooms        Int
  bathrooms       Int // Number of full bathrooms
  halfBathrooms   Int? // Number of half bathrooms
  kitchen         String // Brief description of the kitchen
  livingAndDining String? // Description if integrated or separated
  additionalRooms String? // E.g., office, laundry room, storage

  // Exterior
  yardOrGarden         String? // Description of outdoor space, if available
  parking              Int // Number of parking spots
  parkingLocation      String? // E.g., covered, private, shared
  balconiesAndTerraces String? // Description of balconies or terraces
  recreationalAreas    String? // Description of recreational areas, if available
}

model LegalInfo {
  id Int @id @default(autoincrement())

  propertyId Int      @unique // Ahora este campo es único, asegurando la relación uno a uno
  property   Property @relation(fields: [propertyId], references: [id])

  // Property Title
  deedNumber     String // Identification number for the deed
  notary         String // Name of the notary, registration number, and location
  deedDate       DateTime // Date when the deed was registered
  publicRegistry String // Folio number or registry code in the Public Property Registry

  // Registered Owner
  ownerName    String
  ownerID      String // Official ID of the owner (e.g., passport number, etc.)
  ownerAddress String? // Contact address if different from the property
  ownerContact String? // Contact number for legal or emergency issues

  // Property Usage
  zoning             String // Zoning classification (residential, commercial, etc.)
  usageRestrictions  String? // Details of any restrictions on usage
  permitsAndLicenses String? // Necessary permits for current usage
  zoningHistory      String? // History of zoning changes, if any

  // Active Contracts
  leaseContract          String? // Summary or copy of the current lease agreement
  contractDuration       String? // Contract duration, start and end date, renewal terms
  tenantResponsibilities String? // Legal responsibilities of the tenant
  ownerResponsibilities  String? // Legal obligations of the owner

  // Legal History of the Property
  ownershipChanges String? // History of ownership transfers with dates
  mortgagesOrLiens String? // Information about mortgages, liens, or encumbrances
  legalDisputes    String? // Information on past or pending legal disputes
  auctionHistory   String? // History of auctions or bank repossessions

  // Taxes and Fiscal Obligations
  propertyTax          String // Cadastral account number and status of property tax
  specialTaxesOrFees   String? // Additional taxes or service fees applicable
  debtFreeCertificates String? // Documentation certifying no fiscal debts

  // Property Policies and Warranties
  constructionWarranty  String? // Construction warranty details if newly built
  equipmentWarranties   String? // Warranties for appliances, HVAC, electrical or plumbing systems
  structuralSafetyCerts String? // Structural safety certificates, e.g., seismic certifications

  // Regulations and Norms
  internalRegulations  String? // Regulations if part of a condominium or gated community
  localNorms           String? // Summary of specific local norms affecting the property
  environmentalPermits String? // Permits required if located in a protected environmental area
}

model Tenant {
  id                     Int                  @id @default(autoincrement())
  propertyId             Int // Foreign key to Property model
  property               Property             @relation(fields: [propertyId], references: [id])
  // Basic Tenant Information
  fullName               String
  identificationDocument String // Type and number (e.g., ID, passport)
  birthDate              DateTime
  phone                  String
  email                  String
  additionalAddress      String? // Additional postal address if applicable
  additionalResidents    AdditionalResident[] // List of additional people residing with the tenant

  // Lease Contract Details
  leaseStartDate   DateTime
  leaseEndDate     DateTime
  contractDuration String // Short-term, long-term, or indefinite
  renewalTerms     String? // Terms for renewal or notice for termination
  securityDeposit  Float // Amount and details on refund conditions
  specificClauses  String? // Any specific agreed clauses (e.g., pet policies)

  // Financial Information and Payments
  rentAmount             Float // Monthly or periodic rent amount
  preferredPaymentMethod String // Payment method (e.g., bank transfer)
  paymentHistory         Payment[] // Payment records with status
  discountsOrAdjustments String? // Any discounts or adjustments in specific cases

  // Tenant Responsibilities
  tenantUtilities  String? // List of utilities tenant is responsible for
  basicMaintenance String? // Basic maintenance obligations
  reportedIssues   String? // Details on any reported issues or damages
  pets             String? // Information about pets if allowed

  // Stay History
  moveInDate            DateTime
  absencePeriods        String? // Temporary absences with dates if applicable
  contractModifications String? // Record of any contract changes

  // Tenant Evaluation and Comments
  satisfactionSurveys  String? // Survey results or feedback notes
  communicationHistory String? // Notes on important communications
  incidents            String? // Notable incidents involving tenant

  // Emergency Contacts and Trusted Persons
  emergencyContactName     String
  emergencyContactPhone    String
  emergencyContactRelation String
  trustedPerson            String? // Authorized individual for property access
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model AdditionalResident {
  id                     Int       @id @default(autoincrement())
  tenantId               Int // Foreign key to Tenant model
  tenant                 Tenant    @relation(fields: [tenantId], references: [id])
  // Basic Information for Each Additional Person
  fullName               String
  relationshipToTenant   String // Relationship to primary tenant
  identificationDocument String? // Optional ID for verification
  birthDate              DateTime
  phone                  String? // Contact phone number if applicable
  email                  String? // Contact email if needed
  // Duration of Stay
  stayStartDate          DateTime
  stayEndDate            DateTime? // End date if applicable (for temporary residents)
  stayConditions         String? // Any specific conditions for stay
  // Responsibilities and Property Access
  sharedResponsibilities String? // Shared responsibilities if applicable
  propertyAccess         Boolean // Whether this person has independent access
  specialPermissions     String? // Permissions or restrictions
  // Pets and Associated Items
  pets                   String? // Information on pets if they reside with this person
  personalFurniture      String? // Details on personal furniture or equipment
  // Incidents and Relevant Notes
  notableIncidents       String? // Record of any incidents involving this person
  additionalComments     String? // Additional notes for records
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Payment {
  id                     Int      @id @default(autoincrement())
  tenantId               Int // Foreign key to Tenant model
  tenant                 Tenant   @relation(fields: [tenantId], references: [id])
  // Payment Details
  paymentDate            DateTime
  paymentStatus          String // Status (on-time, delayed, pending)
  paymentNotes           String? // Notes for partial or incomplete payments
  lateFees               Float? // Late fees if any
  discountsOrAdjustments String? // Adjustments if any
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}
